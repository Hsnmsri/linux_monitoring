#include "Log.hpp"

/**
 * @brief Logs a message to the console with a timestamp.
 *
 * This function outputs a message to the standard output (console) with a timestamp prefix.
 *
 * The timestamp is generated by the `getCurrentTime` function, which provides the current time
 * in a human-readable format. The message content is appended after the timestamp, and a newline
 * is added at the end for proper formatting.
 *
 * @param content The message to be logged to the console. This is a string that will be displayed
 *                alongside the timestamp.
 *
 * Usage:
 * - This function is typically used for logging informational or debug messages during the
 *   execution of the program.
 *
 * Example:
 * @code
 * Log logger;
 * logger.logToConsole("Application started successfully.");
 * @endcode
 */
void Log::logToConsole(const std::string &content)
{
    std::cout << "[" << getCurrentTime() << "] " << content << std::endl;
}

/**
 * @brief Retrieves the current local time as a formatted string.
 *
 * This function obtains the current system time, converts it to local time, and formats it
 * into a human-readable string. The resulting string is in the format "YYYY-MM-DD HH:MM:SS".
 *
 * The function uses the `std::chrono` library to get the current time and then converts this
 * to a `std::tm` structure representing the local time. The formatted string is created using
 * `std::put_time` to ensure proper formatting.
 *
 * @return A string representing the current local time in the format "YYYY-MM-DD HH:MM:SS".
 *
 * Usage:
 * - This function is typically used for generating timestamps that are included in log messages
 *   or other time-sensitive outputs.
 *
 * Example:
 * @code
 * Log logger;
 * std::string currentTime = logger.getCurrentTime();
 * std::cout << "Current Time: " << currentTime << std::endl;
 * @endcode
 */
std::string Log::getCurrentTime()
{
    auto now = std::chrono::system_clock::now();
    std::time_t currentTime = std::chrono::system_clock::to_time_t(now);
    std::tm *localTime = std::localtime(&currentTime);

    std::ostringstream oss;
    oss << std::put_time(localTime, "%Y-%m-%d %H:%M:%S");
    return oss.str();
}
